{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport { getSessionUrlProvider } from \"./SessionUrlProvider\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar sessionUrlProvider = getSessionUrlProvider();\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n    _classCallCheck(this, AuthRequest);\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandomAsync(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    invariant(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.usePKCE) {\n                _context.next = 3;\n                break;\n              }\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.ensureCodeIsSetupAsync());\n            case 3:\n              _context.t0 = this.responseType;\n              _context.t1 = this.clientId;\n              _context.t2 = this.redirectUri;\n              _context.t3 = this.scopes;\n              _context.t4 = this.clientSecret;\n              _context.t5 = this.codeChallenge;\n              _context.t6 = this.codeChallengeMethod;\n              _context.t7 = this.prompt;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(this.getStateAsync());\n            case 13:\n              _context.t8 = _context.sent;\n              _context.t9 = this.extraParams;\n              _context.t10 = this.usePKCE;\n              return _context.abrupt(\"return\", {\n                responseType: _context.t0,\n                clientId: _context.t1,\n                redirectUri: _context.t2,\n                scopes: _context.t3,\n                clientSecret: _context.t4,\n                codeChallenge: _context.t5,\n                codeChallengeMethod: _context.t6,\n                prompt: _context.t7,\n                state: _context.t8,\n                extraParams: _context.t9,\n                usePKCE: _context.t10\n              });\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"promptAsync\",\n    value: function promptAsync(discovery) {\n      var _ref,\n        url,\n        options,\n        startUrl,\n        returnUrl,\n        result,\n        useProxy,\n        openOptions,\n        _args2 = arguments;\n      return _regeneratorRuntime.async(function promptAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, url = _ref.url, options = _objectWithoutProperties(_ref, [\"url\"]);\n              if (url) {\n                _context2.next = 15;\n                break;\n              }\n              if (this.url) {\n                _context2.next = 14;\n                break;\n              }\n              _context2.t0 = this;\n              _context2.t1 = discovery;\n              _context2.t2 = _objectSpread;\n              _context2.t3 = _objectSpread({}, options);\n              _context2.t4 = {};\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(this.makeAuthUrlAsync(discovery));\n            case 10:\n              _context2.t5 = _context2.sent;\n              _context2.t6 = {\n                url: _context2.t5\n              };\n              _context2.t7 = (0, _context2.t2)(_context2.t3, _context2.t4, _context2.t6);\n              return _context2.abrupt(\"return\", _context2.t0.promptAsync.call(_context2.t0, _context2.t1, _context2.t7));\n            case 14:\n              url = this.url;\n            case 15:\n              invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n              startUrl = url;\n              returnUrl = this.redirectUri;\n              if (options.useProxy) {\n                returnUrl = sessionUrlProvider.getDefaultReturnUrl();\n                startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n              }\n              if (!_authLock) {\n                _context2.next = 22;\n                break;\n              }\n              if (__DEV__) {\n                console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n              }\n              return _context2.abrupt(\"return\", {\n                type: 'locked'\n              });\n            case 22:\n              _authLock = true;\n              _context2.prev = 23;\n              useProxy = options.useProxy, openOptions = _objectWithoutProperties(options, [\"useProxy\"]);\n              _context2.next = 27;\n              return _regeneratorRuntime.awrap(WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions));\n            case 27:\n              result = _context2.sent;\n            case 28:\n              _context2.prev = 28;\n              _authLock = false;\n              return _context2.finish(28);\n            case 31:\n              if (!(result.type === 'opened')) {\n                _context2.next = 33;\n                break;\n              }\n              throw new Error('An unexpected error occurred');\n            case 33:\n              if (!(result.type !== 'success')) {\n                _context2.next = 35;\n                break;\n              }\n              return _context2.abrupt(\"return\", {\n                type: result.type\n              });\n            case 35:\n              return _context2.abrupt(\"return\", this.parseReturnUrl(result.url));\n            case 36:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[23,, 28, 31]], Promise);\n    }\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n        params = _QueryParams$getQuery.params,\n        errorCode = _QueryParams$getQuery.errorCode;\n      var state = params.state,\n        _params$error = params.error,\n        error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function makeAuthUrlAsync(discovery) {\n      var _request$scopes;\n      var request, params, extra, query;\n      return _regeneratorRuntime.async(function makeAuthUrlAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getAuthRequestConfigAsync());\n            case 2:\n              request = _context3.sent;\n              if (request.state) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('Cannot make request URL without a valid `state` loaded');\n            case 5:\n              params = {};\n              if (request.codeChallenge) {\n                params.code_challenge = request.codeChallenge;\n              }\n              for (extra in request.extraParams) {\n                if (extra in request.extraParams) {\n                  params[extra] = request.extraParams[extra];\n                }\n              }\n              if (request.usePKCE && request.codeChallengeMethod) {\n                params.code_challenge_method = request.codeChallengeMethod;\n              }\n              if (request.clientSecret) {\n                params.client_secret = request.clientSecret;\n              }\n              if (request.prompt) {\n                params.prompt = request.prompt;\n              }\n              params.redirect_uri = request.redirectUri;\n              params.client_id = request.clientId;\n              params.response_type = request.responseType;\n              params.state = request.state;\n              if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n                params.scope = request.scopes.join(' ');\n              }\n              query = QueryParams.buildQueryString(params);\n              this.url = discovery.authorizationEndpoint + \"?\" + query;\n              return _context3.abrupt(\"return\", this.url);\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getStateAsync\",\n    value: function getStateAsync() {\n      return _regeneratorRuntime.async(function getStateAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this.state instanceof Promise)) {\n                _context4.next = 4;\n                break;\n              }\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.state);\n            case 3:\n              this.state = _context4.sent;\n            case 4:\n              return _context4.abrupt(\"return\", this.state);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function ensureCodeIsSetupAsync() {\n      var _await$PKCE$buildCode, codeVerifier, codeChallenge;\n      return _regeneratorRuntime.async(function ensureCodeIsSetupAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!this.codeVerifier) {\n                _context5.next = 2;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 2:\n              _context5.next = 4;\n              return _regeneratorRuntime.awrap(PKCE.buildCodeAsync());\n            case 4:\n              _await$PKCE$buildCode = _context5.sent;\n              codeVerifier = _await$PKCE$buildCode.codeVerifier;\n              codeChallenge = _await$PKCE$buildCode.codeChallenge;\n              this.codeVerifier = codeVerifier;\n              this.codeChallenge = codeChallenge;\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return AuthRequest;\n}();","map":{"version":3,"mappings":"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","names":["WebBrowser","invariant","CodeChallengeMethod","ResponseType","AuthError","PKCE","QueryParams","getSessionUrlProvider","TokenResponse","sessionUrlProvider","_authLock","AuthRequest","request","responseType","Code","clientId","redirectUri","scopes","clientSecret","prompt","state","generateRandomAsync","extraParams","codeChallengeMethod","S256","usePKCE","__DEV__","console","warn","client_secret","code_challenge_method","Plain","Platform","select","web","default","ensureCodeIsSetupAsync","codeChallenge","getStateAsync","discovery","url","options","makeAuthUrlAsync","promptAsync","startUrl","returnUrl","useProxy","getDefaultReturnUrl","getStartUrl","type","openOptions","openAuthSessionAsync","result","Error","parseReturnUrl","getQueryParams","params","errorCode","error","parsedError","authentication","error_description","access_token","fromQueryParams","getAuthRequestConfigAsync","code_challenge","extra","redirect_uri","client_id","response_type","length","scope","join","query","buildQueryString","authorizationEndpoint","Promise","codeVerifier","buildCodeAsync"],"sourceRoot":"","sources":["../src/AuthRequest.ts"],"sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport { getSessionUrlProvider } from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nconst sessionUrlProvider = getSessionUrlProvider();\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n/**\n * Implements an authorization request.\n *\n * [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: Promise<string> | string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandomAsync(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: await this.getStateAsync(),\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl();\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async getStateAsync(): Promise<string> {\n    // Resolve any pending state.\n    if (this.state instanceof Promise) this.state = await this.state;\n    return this.state;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}