{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nimport { WebBrowserResultType } from \"./WebBrowser.types\";\nexport { WebBrowserResultType };\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _regeneratorRuntime.async(function getCustomTabsSupportingBrowsersAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context.next = 6;\n            break;\n          }\n          return _context.abrupt(\"return\", emptyCustomTabsPackages);\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync());\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function warmUpAsync(browserPackage) {\n  return _regeneratorRuntime.async(function warmUpAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentWebBrowser.warmUpAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context2.next = 6;\n            break;\n          }\n          return _context2.abrupt(\"return\", {});\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.warmUpAsync(browserPackage));\n        case 8:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function mayInitWithUrlAsync(url, browserPackage) {\n  return _regeneratorRuntime.async(function mayInitWithUrlAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentWebBrowser.mayInitWithUrlAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context3.next = 6;\n            break;\n          }\n          return _context3.abrupt(\"return\", {});\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage));\n        case 8:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function coolDownAsync(browserPackage) {\n  return _regeneratorRuntime.async(function coolDownAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExponentWebBrowser.coolDownAsync) {\n            _context4.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context4.next = 6;\n            break;\n          }\n          return _context4.abrupt(\"return\", {});\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.coolDownAsync(browserPackage));\n        case 8:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar browserLocked = false;\nexport function openBrowserAsync(url) {\n  var browserParams,\n    result,\n    _args5 = arguments;\n  return _regeneratorRuntime.async(function openBrowserAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          browserParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n          if (ExponentWebBrowser.openBrowserAsync) {\n            _context5.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n        case 3:\n          if (!browserLocked) {\n            _context5.next = 6;\n            break;\n          }\n          if (__DEV__) {\n            console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n          }\n          return _context5.abrupt(\"return\", {\n            type: WebBrowserResultType.LOCKED\n          });\n        case 6:\n          browserLocked = true;\n          _context5.prev = 7;\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.openBrowserAsync(url, browserParams));\n        case 10:\n          result = _context5.sent;\n        case 11:\n          _context5.prev = 11;\n          browserLocked = false;\n          return _context5.finish(11);\n        case 14:\n          return _context5.abrupt(\"return\", result);\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[7,, 11, 14]], Promise);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(url, redirectUrl) {\n  var browserParams,\n    _args6 = arguments;\n  return _regeneratorRuntime.async(function openAuthSessionAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          browserParams = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};\n          if (!_authSessionIsNativelySupported()) {\n            _context6.next = 9;\n            break;\n          }\n          if (ExponentWebBrowser.openAuthSessionAsync) {\n            _context6.next = 4;\n            break;\n          }\n          throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n        case 4:\n          if (!(Platform.OS === 'web')) {\n            _context6.next = 6;\n            break;\n          }\n          return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, browserParams));\n        case 6:\n          return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl));\n        case 9:\n          return _context6.abrupt(\"return\", _openAuthSessionPolyfillAsync(url, redirectUrl, browserParams));\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nexport function maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\nvar _isAppStateAvailable = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nfunction _openBrowserAndWaitAndroidAsync(startUrl) {\n  var browserParams,\n    appStateChangedToActive,\n    result,\n    _await$openBrowserAsy,\n    type,\n    _args7 = arguments;\n  return _regeneratorRuntime.async(function _openBrowserAndWaitAndroidAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          browserParams = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          appStateChangedToActive = new Promise(function (resolve) {\n            _onWebBrowserCloseAndroid = resolve;\n            AppState.addEventListener('change', _onAppStateChangeAndroid);\n          });\n          result = {\n            type: WebBrowserResultType.CANCEL\n          };\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(openBrowserAsync(startUrl, browserParams));\n        case 5:\n          _await$openBrowserAsy = _context7.sent;\n          type = _await$openBrowserAsy.type;\n          if (!(type === 'opened')) {\n            _context7.next = 11;\n            break;\n          }\n          _context7.next = 10;\n          return _regeneratorRuntime.awrap(appStateChangedToActive);\n        case 10:\n          result = {\n            type: WebBrowserResultType.DISMISS\n          };\n        case 11:\n          AppState.removeEventListener('change', _onAppStateChangeAndroid);\n          _onWebBrowserCloseAndroid = null;\n          return _context7.abrupt(\"return\", result);\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  var browserParams,\n    _args8 = arguments;\n  return _regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          browserParams = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n          if (!_redirectHandler) {\n            _context8.next = 3;\n            break;\n          }\n          throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n        case 3:\n          if (!_onWebBrowserCloseAndroid) {\n            _context8.next = 5;\n            break;\n          }\n          throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n        case 5:\n          _context8.prev = 5;\n          if (!(Platform.OS === 'android')) {\n            _context8.next = 12;\n            break;\n          }\n          _context8.next = 9;\n          return _regeneratorRuntime.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n        case 9:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 12:\n          _context8.next = 14;\n          return _regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n        case 14:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 15:\n          _context8.prev = 15;\n          if (ExponentWebBrowser.dismissBrowser) {\n            ExponentWebBrowser.dismissBrowser();\n          }\n          _stopWaitingForRedirect();\n          return _context8.finish(15);\n        case 19:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[5,, 15, 19]], Promise);\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    _redirectHandler = function _redirectHandler(event) {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"mappings":"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","names":["UnavailabilityError","ExponentWebBrowser","WebBrowserResultType","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","Platform","OS","warmUpAsync","browserPackage","mayInitWithUrlAsync","url","coolDownAsync","browserLocked","openBrowserAsync","browserParams","__DEV__","console","warn","type","LOCKED","result","dismissBrowser","openAuthSessionAsync","redirectUrl","_authSessionIsNativelySupported","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","options","message","versionNumber","parseInt","String","Version","_redirectHandler","_onWebBrowserCloseAndroid","_isAppStateAvailable","AppState","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","startUrl","appStateChangedToActive","Promise","resolve","addEventListener","CANCEL","DISMISS","removeEventListener","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","Linking","event","startsWith"],"sourceRoot":"","sources":["../src/WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { AppState, AppStateStatus, Linking, Platform } from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (Platform.OS === 'web') {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, browserParams);\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, browserParams);\n  }\n}\n\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/**\n * Attempts to complete an auth session in the browser.\n *\n * @param options\n */\nexport function maybeCompleteAuthSession(\n  options: { skipRedirectCheck?: boolean } = {}\n): { type: 'success' | 'failed'; message: string } {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  const { type } = await openBrowserAsync(startUrl, browserParams);\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<WebBrowserRedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}